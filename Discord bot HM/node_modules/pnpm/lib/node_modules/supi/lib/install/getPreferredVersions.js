"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lockfile_utils_1 = require("@pnpm/lockfile-utils");
const manifest_utils_1 = require("@pnpm/manifest-utils");
const getVerSelType = require("version-selector-type");
function getPreferredVersionsFromPackage(pkg) {
    return getVersionSpecsByRealNames(manifest_utils_1.getAllDependenciesFromManifest(pkg));
}
exports.default = getPreferredVersionsFromPackage;
function getVersionSpecsByRealNames(deps) {
    return Object.keys(deps)
        .reduce((acc, depName) => {
        if (deps[depName].startsWith('npm:')) {
            const pref = deps[depName].substr(4);
            const index = pref.lastIndexOf('@');
            const spec = pref.substr(index + 1);
            const selector = getVerSelType(spec);
            if (selector) {
                const pkgName = pref.substr(0, index);
                acc[pkgName] = acc[pkgName] || {};
                acc[pkgName][selector.normalized] = selector.type;
            }
        }
        else if (!deps[depName].includes(':')) { // we really care only about semver specs
            const selector = getVerSelType(deps[depName]);
            if (selector) {
                acc[depName] = acc[depName] || {};
                acc[depName][selector.normalized] = selector.type;
            }
        }
        return acc;
    }, {});
}
function getPreferredVersionsFromLockfile(snapshots) {
    const preferredVersions = {};
    for (const [relDepPath, snapshot] of Object.entries(snapshots)) {
        const { name, version } = lockfile_utils_1.nameVerFromPkgSnapshot(relDepPath, snapshot);
        if (!preferredVersions[name]) {
            preferredVersions[name] = { [version]: 'version' };
        }
        else {
            preferredVersions[name][version] = 'version';
        }
    }
    return preferredVersions;
}
exports.getPreferredVersionsFromLockfile = getPreferredVersionsFromLockfile;
//# sourceMappingURL=getPreferredVersions.js.map