"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lockfile_file_1 = require("@pnpm/lockfile-file");
const matcher_1 = require("@pnpm/matcher");
const modules_yaml_1 = require("@pnpm/modules-yaml");
const store_path_1 = require("@pnpm/store-path");
const path = require("path");
const R = require("ramda");
const createManifestGetter_1 = require("./createManifestGetter");
const outdated_1 = require("./outdated");
async function outdatedDepsOfProjects(pkgs, args, opts) {
    var _a, _b;
    if (!opts.lockfileDir) {
        return R.unnest(await Promise.all(pkgs.map((pkg) => outdatedDepsOfProjects([pkg], args, { ...opts, lockfileDir: pkg.dir }))));
    }
    const lockfileDir = (_a = opts.lockfileDir) !== null && _a !== void 0 ? _a : opts.dir;
    const modules = await modules_yaml_1.read(path.join(lockfileDir, 'node_modules'));
    const virtualStoreDir = (_b = modules === null || modules === void 0 ? void 0 : modules.virtualStoreDir) !== null && _b !== void 0 ? _b : path.join(lockfileDir, 'node_modules/.pnpm');
    const currentLockfile = await lockfile_file_1.readCurrentLockfile(virtualStoreDir, { ignoreIncompatible: false });
    const wantedLockfile = await lockfile_file_1.readWantedLockfile(lockfileDir, { ignoreIncompatible: false }) || currentLockfile;
    const storeDir = await store_path_1.default(opts.dir, opts.storeDir);
    const getLatestManifest = createManifestGetter_1.createManifestGetter({
        ...opts,
        lockfileDir,
        storeDir,
    });
    return Promise.all(pkgs.map(async ({ dir, manifest }) => {
        let match = args.length && matcher_1.default(args) || undefined;
        return outdated_1.default({
            compatible: opts.compatible,
            currentLockfile,
            getLatestManifest,
            include: opts.include,
            lockfileDir,
            manifest,
            match,
            prefix: dir,
            wantedLockfile,
        });
    }));
}
exports.default = outdatedDepsOfProjects;
//# sourceMappingURL=outdatedDepsOfProjects.js.map