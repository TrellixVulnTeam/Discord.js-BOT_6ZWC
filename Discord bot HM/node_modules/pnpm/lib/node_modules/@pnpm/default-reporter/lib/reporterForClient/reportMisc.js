"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const most = require("most");
const os = require("os");
const reportError_1 = require("../reportError");
const formatWarn_1 = require("./utils/formatWarn");
const zooming_1 = require("./utils/zooming");
// tslint:disable:object-literal-sort-keys
const LOG_LEVEL_NUMBER = {
    error: 0,
    warn: 1,
    info: 2,
    debug: 3,
};
// tslint:enable:object-literal-sort-keys
exports.default = (log$, opts) => {
    var _a, _b;
    const maxLogLevel = (_b = LOG_LEVEL_NUMBER[(_a = opts.logLevel) !== null && _a !== void 0 ? _a : 'info']) !== null && _b !== void 0 ? _b : LOG_LEVEL_NUMBER['info'];
    return most.merge(log$.registry, log$.other)
        .filter((obj) => LOG_LEVEL_NUMBER[obj.level] <= maxLogLevel &&
        (obj.level !== 'info' || !obj['prefix'] || obj['prefix'] === opts.cwd))
        .map((obj) => {
        var _a;
        switch (obj.level) {
            case 'warn':
                return zooming_1.autozoom(opts.cwd, obj.prefix, formatWarn_1.default(obj.message), opts);
            case 'error':
                if (((_a = obj['message']) === null || _a === void 0 ? void 0 : _a['prefix']) && obj['message']['prefix'] !== opts.cwd) {
                    return `${obj['message']['prefix']}:` + os.EOL + reportError_1.default(obj);
                }
                return reportError_1.default(obj);
            default:
                return obj['message'];
        }
    })
        .map((msg) => ({ msg }))
        .map(most.of);
};
//# sourceMappingURL=reportMisc.js.map